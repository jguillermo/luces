CCS PCM C Compiler, Version 4.057, 7278               07-may-11 15:19

               Filename: mainLuces.lst

               ROM used: 764 words (9%)
                         Largest free fragment is 2048
               RAM used: 52 (14%) at main() level
                         57 (15%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   236
0003:  NOP
.................... #INCLUDE "C:\Archivos de programa\PICC\Devices\16f877a.h" 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #FUSES HS,NOWDT,NOLVP,PUT,NOPROTECT 
.................... #USE delay(clock=4000000) 
*
01AA:  MOVLW  4E
01AB:  MOVWF  04
01AC:  BCF    03.7
01AD:  MOVF   00,W
01AE:  BTFSC  03.2
01AF:  GOTO   1BE
01B0:  MOVLW  01
01B1:  MOVWF  78
01B2:  CLRF   77
01B3:  DECFSZ 77,F
01B4:  GOTO   1B3
01B5:  DECFSZ 78,F
01B6:  GOTO   1B2
01B7:  MOVLW  4A
01B8:  MOVWF  77
01B9:  DECFSZ 77,F
01BA:  GOTO   1B9
01BB:  GOTO   1BC
01BC:  DECFSZ 00,F
01BD:  GOTO   1B0
01BE:  RETLW  00
.................... #BYTE PORTC=0x07 
.................... #BYTE PORTD=0x08  
....................  
.................... #BIT RD0=0x08.0//data 
.................... #BIT RD1=0x08.1//clock 
.................... #BIT RD2=0x08.2//reset 
....................  
.................... int useg1=5,useg2=20; 
*
0241:  MOVLW  05
0242:  BCF    03.5
0243:  MOVWF  20
0244:  MOVLW  14
0245:  MOVWF  21
.................... int aux,iaux,apbi,apbi2,intsb=0,auxfila; 
0246:  CLRF   26
.................... int i,iselect=0; 
0247:  CLRF   29
.................... int num=5,num2=0,posled2=1; 
0248:  MOVLW  05
0249:  MOVWF  2A
024A:  CLRF   2B
024B:  MOVLW  01
024C:  MOVWF  2C
....................  
.................... int letpos[6]={0,1,2,3,4,5},portprende[7]={0x01,0x02,0x04,0x08,0x10,0x20,0x40}; 
024D:  CLRF   2D
024E:  MOVWF  2E
024F:  MOVLW  02
0250:  MOVWF  2F
0251:  MOVLW  03
0252:  MOVWF  30
0253:  MOVLW  04
0254:  MOVWF  31
0255:  MOVLW  05
0256:  MOVWF  32
0257:  MOVLW  01
0258:  MOVWF  33
0259:  MOVLW  02
025A:  MOVWF  34
025B:  MOVLW  04
025C:  MOVWF  35
025D:  MOVLW  08
025E:  MOVWF  36
025F:  MOVLW  10
0260:  MOVWF  37
0261:  MOVLW  20
0262:  MOVWF  38
0263:  MOVLW  40
0264:  MOVWF  39
....................  
....................  
.................... int frace[11]={13,9,0,11,25,11,25,0,0,27,0}; 
0265:  MOVLW  0D
0266:  MOVWF  3A
0267:  MOVLW  09
0268:  MOVWF  3B
0269:  CLRF   3C
026A:  MOVLW  0B
026B:  MOVWF  3D
026C:  MOVLW  19
026D:  MOVWF  3E
026E:  MOVLW  0B
026F:  MOVWF  3F
0270:  MOVLW  19
0271:  MOVWF  40
0272:  CLRF   41
0273:  CLRF   42
0274:  MOVLW  1B
0275:  MOVWF  43
0276:  CLRF   44
.................... long nufra=11,tamletra=66; 
0277:  MOVLW  0B
0278:  MOVWF  45
0279:  CLRF   46
027A:  MOVLW  42
027B:  MOVWF  47
027C:  CLRF   48
....................  
....................  
....................  
.................... int const lether[28][7]={ 
.................... {0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F},  //  	vacio 
.................... {0x0E,0x0E,0x0E,0x00,0x0E,0x0E,0x11},  //  A 
.................... {0x01,0x0E,0x0E,0x01,0x0E,0x0E,0x01},  //  B 
.................... {0x10,0x0F,0x0F,0x0F,0x0F,0x0F,0x10},  //  C 
.................... {0x01,0x16,0x16,0x16,0x16,0x16,0x01},  //  D 
.................... {0x11,0x0E,0x0F,0x00,0x0E,0x15,0x1B},  //  e 
.................... {0x0F,0x0F,0x0F,0x03,0x0F,0x0F,0x00},  //  F 
.................... {0x11,0x0E,0x0E,0x0C,0x0F,0x0E,0x11},  //  G 
.................... {0x0E,0x0E,0x0E,0x00,0x0E,0x0E,0x0E},  //  H 
.................... {0x00,0x1B,0x1B,0x1B,0x1B,0x1B,0x00},  //  I 
.................... {0x13,0x0B,0x1B,0x1B,0x1B,0x1B,0x00},  //  J 
.................... {0x0E,0x0D,0x0B,0x07,0x0B,0x0D,0x0E},  //  K 
.................... {0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F},  //  L 
.................... {0x0E,0x0E,0x0E,0x0E,0x0A,0x04,0x0E},  //  M 
.................... {0x0E,0x0E,0x0C,0x0A,0x06,0x0E,0x0E},  //  N 
.................... {0x11,0x0E,0x0E,0x0E,0x0E,0x0E,0x11},  //  O 
.................... {0x0F,0x0F,0x0F,0x01,0x0E,0x0E,0x01},  //  P 
.................... {0x12,0x0D,0x0D,0x0D,0x0D,0x0D,0x13},  //  Q 
.................... {0x0E,0x0D,0x0B,0x01,0x0E,0x0E,0x01},  //  R 
.................... {0x11,0x0E,0x1E,0x11,0x0F,0x0E,0x11},  //  S 
.................... {0x1B,0x1B,0x1B,0x1B,0x1B,0x1B,0x00},  //  T 
.................... {0x11,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E},  //  U 
.................... {0x1B,0x1B,0x15,0x15,0x0E,0x0E,0x0E},  //  V 
.................... {0x0E,0x04,0x0A,0x0E,0x0E,0x0E,0x0E},  //  W 
.................... {0x0E,0x0E,0x15,0x1B,0x15,0x0E,0x0E},  //  X 
.................... {0x1B,0x1B,0x1B,0x1B,0x15,0x0E,0x0E},  //  Y 
.................... {0x00,0x0F,0x17,0x1B,0x1D,0x1E,0x00},  //  Z 
.................... {0x0E,0x0E,0x0C,0x0A,0x06,0x0F,0x08},  //  Ñ 
.................... }; 
.................... void reset(); 
.................... void set01(); 
.................... void fila(int nu); 
.................... void letrero(); 
.................... void letrero2(); 
.................... void letrero3(); 
.................... void pausaletrero(); 
.................... void intercambianumletra(); 
....................  
.................... void main(void) 
.................... { 
*
0236:  CLRF   04
0237:  BCF    03.7
0238:  MOVLW  1F
0239:  ANDWF  03,F
023A:  BSF    03.5
023B:  BSF    1F.0
023C:  BSF    1F.1
023D:  BSF    1F.2
023E:  BCF    1F.3
023F:  MOVLW  07
0240:  MOVWF  1C
....................     int nh=0; 
*
027F:  CLRF   4A
.................... 	int cmde=0; 
0280:  CLRF   4B
.................... 	long csc=0; 
0281:  CLRF   4C
0282:  CLRF   4D
.................... 	set_tris_c(0x00);  // 1=ENTRADA, 0=SALIDA  
*
027D:  MOVLW  FF
027E:  MOVWF  49
*
0283:  MOVLW  00
0284:  BSF    03.5
0285:  MOVWF  07
0286:  BCF    03.5
0287:  MOVWF  49
.................... 	set_tris_d(0x00);  
0288:  BSF    03.5
0289:  MOVWF  08
....................     PORTC=0; 
028A:  BCF    03.5
028B:  CLRF   07
.................... 	PORTD=1; 
028C:  MOVLW  01
028D:  MOVWF  08
.................... 	reset(); 
028E:  GOTO   0CC
.................... 	pausaletrero(); 
028F:  CALL   1D4
.................... 	pausaletrero(); 
0290:  CALL   1D4
.................... 	while(TRUE) 
....................     {	nh++; 
0291:  INCF   4A,F
.................... 		switch (cmde)  
.................... 				{ 
0292:  MOVF   4B,W
0293:  BTFSC  03.2
0294:  GOTO   29C
0295:  XORLW  01
0296:  BTFSC  03.2
0297:  GOTO   2C6
0298:  XORLW  03
0299:  BTFSC  03.2
029A:  GOTO   2E0
029B:  GOTO   2FA
.................... 			    case 0: 
.................... 						 
.................... 						if (nh<=useg1) 
029C:  MOVF   4A,W
029D:  SUBWF  20,W
029E:  BTFSS  03.0
029F:  GOTO   2A2
.................... 	   	    				letrero(); 
02A0:  CALL   1BF
....................      					else    
02A1:  GOTO   2C5
....................       	   					{nh=0;num2++; 
02A2:  CLRF   4A
02A3:  INCF   2B,F
.................... 						     if (num2>=6){intercambianumletra();num2=0;} 
02A4:  MOVF   2B,W
02A5:  SUBLW  05
02A6:  BTFSC  03.0
02A7:  GOTO   2AA
02A8:  GOTO   1DE
02A9:  CLRF   2B
.................... 						     num=5-num2;csc++; 
02AA:  MOVF   2B,W
02AB:  SUBLW  05
02AC:  MOVWF  2A
02AD:  INCF   4C,F
02AE:  BTFSC  03.2
02AF:  INCF   4D,F
.................... 							 if (csc>=tamletra)  
02B0:  MOVF   48,W
02B1:  SUBWF  4D,W
02B2:  BTFSS  03.0
02B3:  GOTO   2C5
02B4:  BTFSS  03.2
02B5:  GOTO   2BA
02B6:  MOVF   47,W
02B7:  SUBWF  4C,W
02B8:  BTFSS  03.0
02B9:  GOTO   2C5
.................... 								{ 
.................... 									csc=0;nh=0; 
02BA:  CLRF   4D
02BB:  CLRF   4C
02BC:  CLRF   4A
.................... 									iselect++; 
02BD:  INCF   29,F
.................... 									cmde=iselect; 
02BE:  MOVF   29,W
02BF:  MOVWF  4B
.................... 									if (iselect==2) iselect=0; 
02C0:  MOVF   29,W
02C1:  SUBLW  02
02C2:  BTFSC  03.2
02C3:  CLRF   29
.................... 									pausaletrero(); 
02C4:  CALL   1D4
.................... 								} 
.................... 							} 
.................... 						 
....................            				break; 
02C5:  GOTO   2FA
....................  
....................  
....................     			case 1: 
.................... 						if (nh<=useg2) letrero2(); 
02C6:  MOVF   4A,W
02C7:  SUBWF  21,W
02C8:  BTFSC  03.0
02C9:  GOTO   1F8
....................      					else    
....................       	   					{nh=0; 
02CA:  CLRF   4A
.................... 							 if (intsb==0) posled2++;else posled2--; 
02CB:  MOVF   26,F
02CC:  BTFSS  03.2
02CD:  GOTO   2D0
02CE:  INCF   2C,F
02CF:  GOTO   2D1
02D0:  DECF   2C,F
.................... 							 if (posled2>=8) intsb=1; 
02D1:  MOVF   2C,W
02D2:  SUBLW  07
02D3:  BTFSC  03.0
02D4:  GOTO   2D7
02D5:  MOVLW  01
02D6:  MOVWF  26
.................... 						     if (intsb==1) 
02D7:  DECFSZ 26,W
02D8:  GOTO   2DF
.................... 								{if (posled2==0 ) 
02D9:  MOVF   2C,F
02DA:  BTFSS  03.2
02DB:  GOTO   2DF
.................... 									{intsb=0;cmde=0;pausaletrero();} 
02DC:  CLRF   26
02DD:  CLRF   4B
02DE:  CALL   1D4
.................... 								}	 
.................... 							} 
.................... 						break;	 
02DF:  GOTO   2FA
.................... 			   	case 2: 
.................... 						if (nh<=useg2) letrero3(); 
02E0:  MOVF   4A,W
02E1:  SUBWF  21,W
02E2:  BTFSC  03.0
02E3:  GOTO   217
....................      					else    
....................       	   					{nh=0; 
02E4:  CLRF   4A
.................... 							 if (intsb==0) posled2++;else posled2--; 
02E5:  MOVF   26,F
02E6:  BTFSS  03.2
02E7:  GOTO   2EA
02E8:  INCF   2C,F
02E9:  GOTO   2EB
02EA:  DECF   2C,F
.................... 							 if (posled2>=8) intsb=1; 
02EB:  MOVF   2C,W
02EC:  SUBLW  07
02ED:  BTFSC  03.0
02EE:  GOTO   2F1
02EF:  MOVLW  01
02F0:  MOVWF  26
.................... 						     if (intsb==1) 
02F1:  DECFSZ 26,W
02F2:  GOTO   2F9
.................... 								{if (posled2==0 ) 
02F3:  MOVF   2C,F
02F4:  BTFSS  03.2
02F5:  GOTO   2F9
.................... 									{intsb=0;cmde=0;pausaletrero();} 
02F6:  CLRF   26
02F7:  CLRF   4B
02F8:  CALL   1D4
.................... 								}	 
.................... 							} 
.................... 						break;		 
02F9:  GOTO   2FA
.................... 				 } 
....................      }      	 
02FA:  GOTO   291
.................... } 
.................... void fila(int nu) 
.................... {    
02FB:  SLEEP
.................... 	auxfila=lether[frace[letpos[0]]][nu]; 
*
00FC:  MOVLW  3A
00FD:  ADDWF  2D,W
00FE:  MOVWF  04
00FF:  BCF    03.7
0100:  MOVF   00,W
0101:  MOVWF  51
0102:  MOVLW  07
0103:  MOVWF  52
0104:  CALL   0D2
0105:  MOVF   4E,W
0106:  ADDWF  78,W
0107:  CALL   004
0108:  MOVWF  78
0109:  MOVWF  27
.................... 	if (num>=5){	RD0=bit_test(auxfila,4) ;set01();    } 
010A:  MOVF   2A,W
010B:  SUBLW  04
010C:  BTFSC  03.0
010D:  GOTO   113
010E:  BTFSS  27.4
010F:  BCF    08.0
0110:  BTFSC  27.4
0111:  BSF    08.0
0112:  CALL   0F7
.................... 	if (num>=4){	RD0=bit_test(auxfila,3) ;set01();    } 
0113:  MOVF   2A,W
0114:  SUBLW  03
0115:  BTFSC  03.0
0116:  GOTO   11C
0117:  BTFSS  27.3
0118:  BCF    08.0
0119:  BTFSC  27.3
011A:  BSF    08.0
011B:  CALL   0F7
.................... 	if (num>=3){	RD0=bit_test(auxfila,2) ;set01();    } 
011C:  MOVF   2A,W
011D:  SUBLW  02
011E:  BTFSC  03.0
011F:  GOTO   125
0120:  BTFSS  27.2
0121:  BCF    08.0
0122:  BTFSC  27.2
0123:  BSF    08.0
0124:  CALL   0F7
.................... 	if (num>=2){	RD0=bit_test(auxfila,1) ;set01();    } 
0125:  MOVF   2A,W
0126:  SUBLW  01
0127:  BTFSC  03.0
0128:  GOTO   12E
0129:  BTFSS  27.1
012A:  BCF    08.0
012B:  BTFSC  27.1
012C:  BSF    08.0
012D:  CALL   0F7
.................... 	if (num>=1){	RD0=bit_test(auxfila,0) ;set01();    } 
012E:  MOVF   2A,W
012F:  SUBLW  00
0130:  BTFSC  03.0
0131:  GOTO   137
0132:  BTFSS  27.0
0133:  BCF    08.0
0134:  BTFSC  27.0
0135:  BSF    08.0
0136:  CALL   0F7
.................... 	RD0=1;set01(); 
0137:  BSF    08.0
0138:  CALL   0F7
....................     for  (i=1;i<5;i++) 
0139:  MOVLW  01
013A:  MOVWF  28
013B:  MOVF   28,W
013C:  SUBLW  04
013D:  BTFSS  03.0
013E:  GOTO   16E
....................     	{ 
....................     		auxfila=lether[frace[letpos[i]]][nu]; 
013F:  MOVLW  2D
0140:  ADDWF  28,W
0141:  MOVWF  04
0142:  BCF    03.7
0143:  MOVLW  3A
0144:  ADDWF  00,W
0145:  MOVWF  04
0146:  BCF    03.7
0147:  MOVF   00,W
0148:  MOVWF  51
0149:  MOVLW  07
014A:  MOVWF  52
014B:  CALL   0D2
014C:  MOVF   4E,W
014D:  ADDWF  78,W
014E:  CALL   004
014F:  MOVWF  78
0150:  MOVWF  27
.................... 			RD0=bit_test(auxfila,4) ;set01(); 	 
0151:  BTFSS  27.4
0152:  BCF    08.0
0153:  BTFSC  27.4
0154:  BSF    08.0
0155:  CALL   0F7
.................... 			RD0=bit_test(auxfila,3) ;set01();  
0156:  BTFSS  27.3
0157:  BCF    08.0
0158:  BTFSC  27.3
0159:  BSF    08.0
015A:  CALL   0F7
.................... 			RD0=bit_test(auxfila,2) ;set01();  
015B:  BTFSS  27.2
015C:  BCF    08.0
015D:  BTFSC  27.2
015E:  BSF    08.0
015F:  CALL   0F7
.................... 			RD0=bit_test(auxfila,1) ;set01();  
0160:  BTFSS  27.1
0161:  BCF    08.0
0162:  BTFSC  27.1
0163:  BSF    08.0
0164:  CALL   0F7
.................... 			RD0=bit_test(auxfila,0) ;set01();  
0165:  BTFSS  27.0
0166:  BCF    08.0
0167:  BTFSC  27.0
0168:  BSF    08.0
0169:  CALL   0F7
.................... 			RD0=1;set01();				 
016A:  BSF    08.0
016B:  CALL   0F7
....................    		 } 
016C:  INCF   28,F
016D:  GOTO   13B
.................... 	auxfila=lether[frace[letpos[5]]][nu]; 
016E:  MOVLW  3A
016F:  ADDWF  32,W
0170:  MOVWF  04
0171:  BCF    03.7
0172:  MOVF   00,W
0173:  MOVWF  51
0174:  MOVLW  07
0175:  MOVWF  52
0176:  CALL   0D2
0177:  MOVF   4E,W
0178:  ADDWF  78,W
0179:  CALL   004
017A:  MOVWF  78
017B:  MOVWF  27
.................... 	if (num2>=1){	RD0=bit_test(auxfila,4) ;set01();   } 
017C:  MOVF   2B,W
017D:  SUBLW  00
017E:  BTFSC  03.0
017F:  GOTO   185
0180:  BTFSS  27.4
0181:  BCF    08.0
0182:  BTFSC  27.4
0183:  BSF    08.0
0184:  CALL   0F7
.................... 	if (num2>=2){	RD0=bit_test(auxfila,3) ;set01();   } 
0185:  MOVF   2B,W
0186:  SUBLW  01
0187:  BTFSC  03.0
0188:  GOTO   18E
0189:  BTFSS  27.3
018A:  BCF    08.0
018B:  BTFSC  27.3
018C:  BSF    08.0
018D:  CALL   0F7
.................... 	if (num2>=3){	RD0=bit_test(auxfila,2) ;set01();   } 
018E:  MOVF   2B,W
018F:  SUBLW  02
0190:  BTFSC  03.0
0191:  GOTO   197
0192:  BTFSS  27.2
0193:  BCF    08.0
0194:  BTFSC  27.2
0195:  BSF    08.0
0196:  CALL   0F7
.................... 	if (num2>=4){	RD0=bit_test(auxfila,1) ;set01();   } 
0197:  MOVF   2B,W
0198:  SUBLW  03
0199:  BTFSC  03.0
019A:  GOTO   1A0
019B:  BTFSS  27.1
019C:  BCF    08.0
019D:  BTFSC  27.1
019E:  BSF    08.0
019F:  CALL   0F7
.................... 	if (num2>=5){	RD0=bit_test(auxfila,0) ;set01();   } 
01A0:  MOVF   2B,W
01A1:  SUBLW  04
01A2:  BTFSC  03.0
01A3:  GOTO   1A9
01A4:  BTFSS  27.0
01A5:  BCF    08.0
01A6:  BTFSC  27.0
01A7:  BSF    08.0
01A8:  CALL   0F7
.................... } 
01A9:  RETLW  00
.................... void intercambianumletra() 
.................... { 
.................... 	aux=letpos[0]; 
*
01DE:  MOVF   2D,W
01DF:  MOVWF  22
.................... 	for(iaux=0;iaux<6;iaux++) 
01E0:  CLRF   23
01E1:  MOVF   23,W
01E2:  SUBLW  05
01E3:  BTFSS  03.0
01E4:  GOTO   1F5
.................... 		{ 
.................... 			aux++; 
01E5:  INCF   22,F
.................... 			if (aux==nufra) aux=0; 
01E6:  MOVF   45,W
01E7:  SUBWF  22,W
01E8:  BTFSS  03.2
01E9:  GOTO   1ED
01EA:  MOVF   46,F
01EB:  BTFSC  03.2
01EC:  CLRF   22
.................... 			letpos[iaux]=aux;		      	 
01ED:  MOVLW  2D
01EE:  ADDWF  23,W
01EF:  MOVWF  04
01F0:  BCF    03.7
01F1:  MOVF   22,W
01F2:  MOVWF  00
.................... 		} 
01F3:  INCF   23,F
01F4:  GOTO   1E1
.................... } 
01F5:  BCF    0A.3
01F6:  BCF    0A.4
01F7:  GOTO   2A9 (RETURN)
.................... void set01() 
.................... { 
....................  	delay_us(2); 
*
00F7:  GOTO   0F8
....................  	RD1=0;//clock 
00F8:  BCF    08.1
....................  	delay_us(2); 
00F9:  GOTO   0FA
....................  	RD1=1;//clock 
00FA:  BSF    08.1
.................... } 
00FB:  RETLW  00
.................... void letrero() 
.................... { 
.................... 	for(apbi=0;apbi<7;apbi++) 
*
01BF:  CLRF   24
01C0:  MOVF   24,W
01C1:  SUBLW  06
01C2:  BTFSS  03.0
01C3:  GOTO   1D3
.................... 		{  
.................... 			PORTC=0X00; 
01C4:  CLRF   07
.................... 			fila(apbi); 
01C5:  MOVF   24,W
01C6:  MOVWF  4E
01C7:  CALL   0FC
.................... 			PORTC=portprende[apbi]; 
01C8:  MOVLW  33
01C9:  ADDWF  24,W
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  MOVF   00,W
01CD:  MOVWF  07
.................... 			delay_ms(1);	 		      	 
01CE:  MOVLW  01
01CF:  MOVWF  4E
01D0:  CALL   1AA
....................     	} 
01D1:  INCF   24,F
01D2:  GOTO   1C0
.................... } 
01D3:  RETLW  00
....................  
.................... void letrero2() 
.................... { 
.................... 	for(apbi=0;apbi<7;apbi++) 
*
01F8:  CLRF   24
01F9:  MOVF   24,W
01FA:  SUBLW  06
01FB:  BTFSS  03.0
01FC:  GOTO   214
.................... 		{  
.................... 			PORTC=0X00; 
01FD:  CLRF   07
.................... 			fila(apbi); 
01FE:  MOVF   24,W
01FF:  MOVWF  4E
0200:  CALL   0FC
.................... 			PORTC=portprende[apbi]<<posled2;	 
0201:  MOVLW  33
0202:  ADDWF  24,W
0203:  MOVWF  04
0204:  BCF    03.7
0205:  MOVF   00,W
0206:  MOVWF  07
0207:  MOVF   2C,W
0208:  MOVWF  78
0209:  BTFSC  03.2
020A:  GOTO   20F
020B:  BCF    03.0
020C:  RLF    07,F
020D:  DECFSZ 78,F
020E:  GOTO   20B
.................... 			delay_ms(1);	 		      	 
020F:  MOVLW  01
0210:  MOVWF  4E
0211:  CALL   1AA
....................     	} 
0212:  INCF   24,F
0213:  GOTO   1F9
.................... } 
0214:  BCF    0A.3
0215:  BCF    0A.4
0216:  GOTO   2DF (RETURN)
.................... void letrero3() 
.................... { 
.................... 	for(apbi=0;apbi<7;apbi++) 
0217:  CLRF   24
0218:  MOVF   24,W
0219:  SUBLW  06
021A:  BTFSS  03.0
021B:  GOTO   233
.................... 		{  
.................... 			PORTC=0X00; 
021C:  CLRF   07
.................... 			fila(apbi); 
021D:  MOVF   24,W
021E:  MOVWF  4E
021F:  CALL   0FC
.................... 			PORTC=portprende[apbi]>>posled2;	 
0220:  MOVLW  33
0221:  ADDWF  24,W
0222:  MOVWF  04
0223:  BCF    03.7
0224:  MOVF   00,W
0225:  MOVWF  07
0226:  MOVF   2C,W
0227:  MOVWF  78
0228:  BTFSC  03.2
0229:  GOTO   22E
022A:  BCF    03.0
022B:  RRF    07,F
022C:  DECFSZ 78,F
022D:  GOTO   22A
.................... 			delay_ms(1);	 		      	 
022E:  MOVLW  01
022F:  MOVWF  4E
0230:  CALL   1AA
....................     	} 
0231:  INCF   24,F
0232:  GOTO   218
.................... } 
0233:  BCF    0A.3
0234:  BCF    0A.4
0235:  GOTO   2F9 (RETURN)
.................... void reset(void) 
.................... { 
....................  	RD2=0;//data 
*
00CC:  BCF    08.2
....................  	delay_us(2); 
00CD:  GOTO   0CE
....................  	RD2=1;//clock	 
00CE:  BSF    08.2
.................... } 
00CF:  BCF    0A.3
00D0:  BCF    0A.4
00D1:  GOTO   28F (RETURN)
....................  
.................... void pausaletrero(void) 
.................... { 
.................... 	for(apbi2=1;apbi2<100;apbi2++)  
*
01D4:  MOVLW  01
01D5:  MOVWF  25
01D6:  MOVF   25,W
01D7:  SUBLW  63
01D8:  BTFSS  03.0
01D9:  GOTO   1DD
.................... 			letrero(); 
01DA:  CALL   1BF
01DB:  INCF   25,F
01DC:  GOTO   1D6
.................... } 
01DD:  RETLW  00
....................  
....................  
.................... /* 
.................... void set0(void){ 
....................  RD0=0;//data 
....................  waitjg(); 
....................  RD1=0;//clock 
....................  waitjg(); 
....................  RD1=1;//clock 
.................... } 
.................... void set1(void){ 
....................  RD0=1;//data 
....................  waitjg(); 
....................  RD1=0;//clock 
....................  waitjg(); 
....................  RD1=1;//clock 
.................... } 
.................... */ 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
